echo "" | base64 -d | kubectl create -f - || test $? -eq 0 && sleep 2 && echo "" | base64 -d | kubectl apply -f - || echo "VGhlIGNsdXN0ZXIgY2Fubm90IGJlIGltcG9ydGVkIGJlY2F1c2UgaXRzIEtsdXN0ZXJsZXQgQ1JEIGFscmVhZHkgZXhpc3RzLgpFaXRoZXIgdGhlIGNsdXN0ZXIgd2FzIGFscmVhZHkgaW1wb3J0ZWQsIG9yIGl0IHdhcyBub3QgZGV0YWNoZWQgY29tcGxldGVseSBkdXJpbmcgYSBwcmV2aW91cyBkZXRhY2ggcHJvY2Vzcy4KRGV0YWNoIHRoZSBleGlzdGluZyBjbHVzdGVyIGJlZm9yZSB0cnlpbmcgdGhlIGltcG9ydCBhZ2Fpbi4=" | base64 -d
